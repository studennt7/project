import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.seasonal import seasonal_decompose
from datetime import timedelta
from fpdf import FPDF
import tempfile
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_and_analyze_data(file):
    try:
        df = pd.read_excel(file)

        required_columns = ['–î–∞—Ç–∞', '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂', '–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–°—É–º–º–∞', '–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è']
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            return f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}", None

        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
        df['–í—ã—Ä—É—á–∫–∞'] = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * df['–°—É–º–º–∞']

        return None, df

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

def make_forecast(df, periods=30):
    try:
        daily_data = df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum', '–í—ã—Ä—É—á–∫–∞': 'sum'}).reset_index()
        daily_data = daily_data.set_index('–î–∞—Ç–∞').asfreq('D').fillna(0)

        X = np.arange(len(daily_data)).reshape(-1, 1)
        y = daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].values
        model = LinearRegression()
        model.fit(X, y)

        future_dates = pd.date_range(start=daily_data.index[-1] + timedelta(days=1), periods=periods)
        X_future = np.arange(len(daily_data), len(daily_data) + periods).reshape(-1, 1)
        y_pred = model.predict(X_future)

        forecast_df = pd.DataFrame({
            '–î–∞—Ç–∞': future_dates,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': y_pred,
            '–¢–∏–ø': '–ü—Ä–æ–≥–Ω–æ–∑'
        })

        actual_df = pd.DataFrame({
            '–î–∞—Ç–∞': daily_data.index,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            '–¢–∏–ø': '–§–∞–∫—Ç'
        })

        combined_df = pd.concat([actual_df, forecast_df])

        return combined_df, None

    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

def generate_recommendations(df):
    recommendations = []

    try:
        daily_sales = df.groupby('–î–∞—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
        decomposition = seasonal_decompose(daily_sales, period=7)

        if decomposition.seasonal.std() > (daily_sales.mean() * 0.1):
            recommendations.append(
                "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–º–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∞—Å—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª —Å —É—á–µ—Ç–æ–º —ç—Ç–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π."
            )
    except:
        pass

    top_products = df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().nlargest(3)
    if len(top_products) > 0:
        recommendations.append(
            f"üèÜ –¢–æ–ø-3 –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂: {', '.join(top_products.index)}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ."
        )

    customer_stats = df.groupby('–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].agg(['sum', 'count'])
    if len(customer_stats) > 1:
        best_customer = customer_stats['sum'].idxmax()
        recommendations.append(
            f"üë• –ù–∞–∏–±–æ–ª—å—à—É—é –≤—ã—Ä—É—á–∫—É –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ç–∏–ø–∞ '{best_customer}'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."
        )

    location_stats = df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')['–í—ã—Ä—É—á–∫–∞'].sum()
    if len(location_stats) > 1:
        best_location = location_stats.idxmax()
        worst_location = location_stats.idxmin()
        recommendations.append(
            f"üìç –õ–æ–∫–∞—Ü–∏—è '{best_location}' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∞ '{worst_location}' - –Ω–∞–∏—Ö—É–¥—à–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Ä–∞–∑–ª–∏—á–∏–π."
        )

    return recommendations if recommendations else ["üîé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞

def generate_pdf_report(df, recommendations):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", '', "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=12)

    pdf.cell(200, 10, txt="–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", ln=True, align='C')

    pdf.ln(10)
    pdf.set_font("DejaVu", size=10)
    for rec in recommendations:
        pdf.multi_cell(0, 8, txt=rec)

    pdf.ln(5)
    pdf.set_font("DejaVu", size=9)
    for index, row in df.head(30).iterrows():  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 30 —Å—Ç—Ä–æ–∫
        text = f"{row['–î–∞—Ç–∞'].strftime('%Y-%m-%d')} | {row['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞']} | {row['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']} | {row['–°—É–º–º–∞']} —Ä—É–±. | {row['–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è']}"
        pdf.multi_cell(0, 7, txt=text)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        pdf.output(tmp.name)
        tmp.seek(0)
        return tmp.read(), tmp.name

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="Sales Smart Analytics", layout="wide")
st.title("üìä Sales Smart Analytics")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.expander("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", expanded=True):
    st.markdown("""
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö. 
    –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
    - –î–∞—Ç–∞
    - –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ 
    - –í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞
    - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    - –°—É–º–º–∞
    - –¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    """)

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type="xlsx", label_visibility="collapsed")

if uploaded_file is not None:
    error_msg, df = load_and_analyze_data(uploaded_file)

    if error_msg:
        st.error(error_msg)
    elif df is not None:
        ...  # –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞

        st.download_button(label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", data=filtered_df.to_csv(index=False).encode('utf-8'), file_name='sales_analysis.csv', mime='text/csv')

        pdf_data, pdf_path = generate_pdf_report(filtered_df, recommendations)
        st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç", data=pdf_data, file_name="sales_report.pdf", mime="application/pdf")


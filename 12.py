import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.seasonal import seasonal_decompose
from datetime import timedelta
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Sales Analytics Pro",
    page_icon="üìä",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_and_analyze_data(file):
    try:
        df = pd.read_excel(file)
        
        required_columns = ['–î–∞—Ç–∞', '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂', '–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–°—É–º–º–∞', '–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            return f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}", None
        
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
        df['–í—ã—Ä—É—á–∫–∞'] = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * df['–°—É–º–º–∞']
        
        return None, df
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", None

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def make_forecast(df, periods=30):
    try:
        daily_data = df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'}).reset_index()
        daily_data = daily_data.set_index('–î–∞—Ç–∞').asfreq('D').fillna(0)
        
        if len(daily_data) < 30:
            return None, "–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö"
        
        # –ú–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–∞
        model = ExponentialSmoothing(
            daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            seasonal_periods=7,
            trend='add',
            seasonal='add',
            damped_trend=True
        ).fit()
        
        forecast = model.forecast(periods)
        future_dates = pd.date_range(
            start=daily_data.index[-1] + timedelta(days=1),
            periods=periods
        )
        
        forecast_df = pd.DataFrame({
            '–î–∞—Ç–∞': future_dates,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': forecast,
            '–¢–∏–ø': '–ü—Ä–æ–≥–Ω–æ–∑'
        })
        
        actual_df = pd.DataFrame({
            '–î–∞—Ç–∞': daily_data.index,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            '–¢–∏–ø': '–§–∞–∫—Ç'
        })
        
        return pd.concat([actual_df, forecast_df]), None
        
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def generate_recommendations(df):
    recommendations = []
    
    try:
        daily_sales = df.groupby('–î–∞—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
        decomposition = seasonal_decompose(daily_sales, period=7)
        
        if decomposition.seasonal.std() > (daily_sales.mean() * 0.1):
            recommendations.append(
                "üîç –í—ã—è–≤–ª–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø–∞—Å—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ."
            )
    except:
        pass
    
    top_products = df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().nlargest(3)
    if len(top_products) > 0:
        recommendations.append(
            f"üèÜ –¢–æ–ø-3 –ø—Ä–æ–¥—É–∫—Ç–∞: {', '.join(top_products.index)}. –£–≤–µ–ª–∏—á—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ."
        )
    
    customer_stats = df.groupby('–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].agg(['sum', 'count'])
    if len(customer_stats) > 1:
        best_customer = customer_stats['sum'].idxmax()
        recommendations.append(
            f"üë• –û—Å–Ω–æ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç '{best_customer}'. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏."
        )
    
    location_stats = df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')['–í—ã—Ä—É—á–∫–∞'].sum()
    if len(location_stats) > 1:
        best_loc = location_stats.idxmax()
        worst_loc = location_stats.idxmin()
        recommendations.append(
            f"üìç –õ—É—á—à–∞—è –ª–æ–∫–∞—Ü–∏—è: {best_loc}, –ø—Ä–æ–±–ª–µ–º–Ω–∞—è: {worst_loc}. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã."
        )
    
    return recommendations if recommendations else ["üîé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà Sales Analytics Pro")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.expander("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", expanded=True):
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–¥–∞–∂ (Excel)",
        type="xlsx",
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: –î–∞—Ç–∞, –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂, –í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –°—É–º–º–∞, –¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
    )

if uploaded_file:
    error_msg, df = load_and_analyze_data(uploaded_file)
    
    if error_msg:
        st.error(error_msg)
    else:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_sales = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
        total_revenue = df['–í—ã—Ä—É—á–∫–∞'].sum()
        avg_price = df['–°—É–º–º–∞'].mean()
        unique_products = df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].nunique()
        
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{total_sales:,.0f}")
        col2.metric("–í—ã—Ä—É—á–∫–∞", f"{total_revenue:,.2f} —Ä—É–±.")
        col3.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_price:.2f} —Ä—É–±.")
        col4.metric("–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", unique_products)
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
        min_date = df['–î–∞—Ç–∞'].min().date()
        max_date = df['–î–∞—Ç–∞'].max().date()
        
        date_range = st.sidebar.date_input(
            "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
        
        products = st.sidebar.multiselect(
            "–ü—Ä–æ–¥—É–∫—Ç—ã",
            options=df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].unique(),
            default=df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].unique()
        )
        
        locations = st.sidebar.multiselect(
            "–õ–æ–∫–∞—Ü–∏–∏",
            options=df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].unique(),
            default=df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].unique()
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if len(date_range) == 2:
            start_date, end_date = date_range
            filtered_df = df[
                (df['–î–∞—Ç–∞'].dt.date >= start_date) & 
                (df['–î–∞—Ç–∞'].dt.date <= end_date) &
                (df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].isin(products)) &
                (df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].isin(locations))
            ]
        else:
            filtered_df = df[
                (df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].isin(products)) &
                (df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].isin(locations))
            ]
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs(["–î–∏–Ω–∞–º–∏–∫–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–õ–æ–∫–∞—Ü–∏–∏", "–ü—Ä–æ–≥–Ω–æ–∑"])
        
        with tab1:
            fig = px.line(
                filtered_df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'}).reset_index(),
                x='–î–∞—Ç–∞',
                y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
                labels={'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '–û–±—ä–µ–º', '–î–∞—Ç–∞': '–î–∞—Ç–∞'}
            )
            fig.update_xaxes(tickformat="%d %b", dtick="M1")
            fig.update_layout(hovermode="x unified")
            st.plotly_chart(fig, use_container_width=True)
            
            st.dataframe(
                filtered_df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum', '–í—ã—Ä—É—á–∫–∞': 'sum'})
                .style.format({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '{:,.0f}', '–í—ã—Ä—É—á–∫–∞': '‚ÇΩ{:,.2f}'}),
                use_container_width=True
            )
        
        with tab2:
            col1, col2 = st.columns(2)
            with col1:
                fig = px.bar(
                    filtered_df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index(),
                    x='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.scatter(
                    filtered_df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞').agg({
                        '–°—É–º–º–∞': 'mean',
                        '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'
                    }).reset_index(),
                    x='–°—É–º–º–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    size='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    color='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
                    title='–¶–µ–Ω–∞ vs –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with tab3:
            col1, col2 = st.columns(2)
            with col1:
                fig = px.pie(
                    filtered_df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')['–í—ã—Ä—É—á–∫–∞'].sum().reset_index(),
                    names='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    values='–í—ã—Ä—É—á–∫–∞',
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.line(
                    filtered_df.groupby(['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞'])['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index(),
                    x='–î–∞—Ç–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    color='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    title='–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º'
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with tab4:
            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 30 –¥–Ω–µ–π")
            forecast_df, forecast_error = make_forecast(filtered_df)
            
            if forecast_error:
                st.warning(forecast_error)
            else:
                col1, col2 = st.columns([2, 1])
                with col1:
                    fig = go.Figure()
                    
                    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
                        name='–§–∞–∫—Ç',
                        line=dict(color='blue')
                    ))
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
                        name='–ü—Ä–æ–≥–Ω–æ–∑',
                        line=dict(color='red', dash='dot')
                    ))
                    
                    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * 1.2,
                        fill=None,
                        mode='lines',
                        line=dict(width=0),
                        showlegend=False
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * 0.8,
                        fill='tonexty',
                        mode='lines',
                        line=dict(width=0),
                        fillcolor='rgba(255,0,0,0.1)',
                        name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
                    ))
                    
                    fig.update_layout(
                        title='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏',
                        xaxis_title='–î–∞—Ç–∞',
                        yaxis_title='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                        hovermode='x unified',
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        )
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.markdown("**–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞**")
                    st.dataframe(
                        forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑'][['–î–∞—Ç–∞', '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']]
                        .rename(columns={'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '–ü—Ä–æ–≥–Ω–æ–∑'})
                        .style.format({'–ü—Ä–æ–≥–Ω–æ–∑': '{:,.0f}'}),
                        hide_index=True
                    )
                    
                    st.markdown("**–ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è**")
                    st.info("""
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ –•–æ–ª—å—Ç–∞-–í–∏–Ω—Ç–µ—Ä—Å–∞:
                    - –£—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞
                    - –£—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                    - –î–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                    """)
            
            st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            recommendations = generate_recommendations(filtered_df)
            for rec in recommendations:
                st.markdown(f"üìå {rec}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=filtered_df.to_csv(index=False).encode('utf-8'),
            file_name="sales_data.csv",
            mime="text/csv"
        )

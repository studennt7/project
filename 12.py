import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.seasonal import seasonal_decompose
from datetime import timedelta
import warnings
from fpdf import FPDF
import base64
from io import BytesIO
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Sales-smart",
    page_icon="üìä",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_and_analyze_data(file):
    try:
        df = pd.read_excel(file)
        
        required_columns = ['–î–∞—Ç–∞', '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂', '–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–°—É–º–º–∞', '–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            return f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}", None
        
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
        df['–í—ã—Ä—É—á–∫–∞'] = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * df['–°—É–º–º–∞']
        
        return None, df
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", None

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def make_forecast(df, periods=30):
    try:
        daily_data = df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'}).reset_index()
        daily_data = daily_data.set_index('–î–∞—Ç–∞').asfreq('D').fillna(0)
        
        if len(daily_data) < 30:
            return None, "–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö"
        
        # –ú–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–∞
        model = ExponentialSmoothing(
            daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            seasonal_periods=7,
            trend='add',
            seasonal='add',
            damped_trend=True
        ).fit()
        
        forecast = model.forecast(periods)
        future_dates = pd.date_range(
            start=daily_data.index[-1] + timedelta(days=1),
            periods=periods
        )
        
        forecast_df = pd.DataFrame({
            '–î–∞—Ç–∞': future_dates,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': forecast,
            '–¢–∏–ø': '–ü—Ä–æ–≥–Ω–æ–∑'
        })
        
        actual_df = pd.DataFrame({
            '–î–∞—Ç–∞': daily_data.index,
            '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': daily_data['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            '–¢–∏–ø': '–§–∞–∫—Ç'
        })
        
        return pd.concat([actual_df, forecast_df]), None
        
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def generate_recommendations(df):
    recommendations = []
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    try:
        daily_sales = df.groupby('–î–∞—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
        decomposition = seasonal_decompose(daily_sales, period=7)
        
        if decomposition.seasonal.std() > (daily_sales.mean() * 0.1):
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            weekday_sales = df.groupby(df['–î–∞—Ç–∞'].dt.dayofweek)['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
            best_day = weekday_sales.idxmax()
            worst_day = weekday_sales.idxmin()
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            
            recommendations.append(
                f"üîç **–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å**: –í—ã—è–≤–ª–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å. "
                f"–õ—É—á—à–∏–π –¥–µ–Ω—å - {days[best_day]} (+{weekday_sales[best_day]/weekday_sales.mean():.0%} –∫ —Å—Ä–µ–¥–Ω–µ–º—É), "
                f"—Ö—É–¥—à–∏–π - {days[worst_day]} ({weekday_sales[worst_day]/weekday_sales.mean():.0%}). "
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø–∞—Å—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª –ø–æ–¥ —ç—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."
            )
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {str(e)}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    product_analysis = df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞').agg({
        '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum',
        '–í—ã—Ä—É—á–∫–∞': 'sum',
        '–°—É–º–º–∞': 'mean'
    }).sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False)
    
    if len(product_analysis) > 0:
        # –¢–æ–ø-3 –ø—Ä–æ–¥—É–∫—Ç–∞
        top_products = product_analysis.head(3)
        rec_text = "üèÜ **–¢–æ–ø-3 –ø—Ä–æ–¥—É–∫—Ç–∞**: "
        for i, (product, row) in enumerate(top_products.iterrows(), 1):
            rec_text += (f"{i}. {product} (–ø—Ä–æ–¥–∞–∂–∏: {row['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']:,.0f} –µ–¥., "
                       f"–≤—ã—Ä—É—á–∫–∞: {row['–í—ã—Ä—É—á–∫–∞']:,.0f} —Ä—É–±., "
                       f"—Å—Ä. —Ü–µ–Ω–∞: {row['–°—É–º–º–∞']:,.2f} —Ä—É–±.)")
            if i < 3: rec_text += "; "
        
        # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã
        bottom_products = product_analysis.tail(3)
        rec_text += ". ‚ùå **–ê—É—Ç—Å–∞–π–¥–µ—Ä—ã**: "
        for i, (product, row) in enumerate(bottom_products.iterrows(), 1):
            rec_text += f"{product} ({row['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']:,.0f} –µ–¥.)"
            if i < 3: rec_text += ", "
        rec_text += " - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω—è—Ç–∏–µ —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏–ª–∏ –∞–∫—Ü–∏–∏."
        
        recommendations.append(rec_text)
    
    # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    customer_stats = df.groupby('–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è').agg({
        '–í—ã—Ä—É—á–∫–∞': ['sum', 'count'],
        '–°—É–º–º–∞': 'mean'
    })
    
    if len(customer_stats) > 1:
        customer_stats.columns = ['–í—ã—Ä—É—á–∫–∞', '–ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫']
        customer_stats['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏'] = customer_stats['–í—ã—Ä—É—á–∫–∞'] / customer_stats['–í—ã—Ä—É—á–∫–∞'].sum()
        
        best_customer = customer_stats.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False).iloc[0]
        worst_customer = customer_stats.sort_values('–í—ã—Ä—É—á–∫–∞').iloc[0]
        
        recommendations.append(
            f"üë• **–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**: –û—Å–Ω–æ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ ({best_customer['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏']:.0%}) –æ—Ç '{best_customer.name}' "
            f"(—Å—Ä.—á–µ–∫: {best_customer['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫']:,.0f} —Ä—É–±., {best_customer['–ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫']} –ø–æ–∫—É–ø–æ–∫). "
            f"–°–ª–∞–±–∞—è –≥—Ä—É–ø–ø–∞: '{worst_customer.name}' ({worst_customer['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏']:.0%} –≤—ã—Ä—É—á–∫–∏). "
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–±—ã—Ö –≥—Ä—É–ø–ø."
        )
    
    # 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π
    location_stats = df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ').agg({
        '–í—ã—Ä—É—á–∫–∞': 'sum',
        '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum',
        '–°—É–º–º–∞': 'mean'
    })
    
    if len(location_stats) > 1:
        location_stats['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏'] = location_stats['–í—ã—Ä—É—á–∫–∞'] / location_stats['–í—ã—Ä—É—á–∫–∞'].sum()
        best_loc = location_stats.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False).iloc[0]
        worst_loc = location_stats.sort_values('–í—ã—Ä—É—á–∫–∞').iloc[0]
        
        recommendations.append(
            f"üìç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥–∞–∂**: –õ—É—á—à–∞—è –ª–æ–∫–∞—Ü–∏—è - {best_loc.name} "
            f"({best_loc['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏']:.0%} –≤—ã—Ä—É—á–∫–∏, {best_loc['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']:,.0f} –µ–¥., "
            f"—Å—Ä.—Ü–µ–Ω–∞: {best_loc['–°—É–º–º–∞']:,.2f} —Ä—É–±.). "
            f"–ü—Ä–æ–±–ª–µ–º–Ω–∞—è: {worst_loc.name} ({worst_loc['–î–æ–ª—è –≤—ã—Ä—É—á–∫–∏']:.0%}). "
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ä–∞–∑–ª–∏—á–∏–π (—Ç—Ä–∞—Ñ–∏–∫, –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Ü–µ–Ω—ã)."
        )
    
    # 5. –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
    try:
        monthly_growth = df.groupby(pd.Grouper(key='–î–∞—Ç–∞', freq='M'))['–í—ã—Ä—É—á–∫–∞'].sum().pct_change()
        if len(monthly_growth) > 1:
            avg_growth = monthly_growth.mean()
            last_growth = monthly_growth[-1]
            
            trend = "üìà —Ä–æ—Å—Ç" if last_growth > 0 else "üìâ —Å–Ω–∏–∂–µ–Ω–∏–µ"
            recommendation = ("–£–≤–µ–ª–∏—á—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–∏–ª–∏—è." if last_growth < 0 
                            else "–ó–∞–∫—Ä–µ–ø–∏—Ç–µ —É—Å–ø–µ—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
            
            recommendations.append(
                f"üìÖ **–î–∏–Ω–∞–º–∏–∫–∞**: –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π {trend} –Ω–∞ {abs(last_growth):.0%} "
                f"(—Å—Ä–µ–¥–Ω–∏–π {avg_growth:.0%}). {recommendation}"
            )
    except:
        pass
    
    # 6. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    try:
        price_elasticity = df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞').apply(
            lambda x: x['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].corr(x['–°—É–º–º–∞'])
        ).mean()
        
        if price_elasticity < -0.3:
            recommendations.append(
                "üí∞ **–¶–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –í—ã—Å–æ–∫–∞—è —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ (-{:.2f}). "
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∞–∫—Ü–∏–∏.".format(abs(price_elasticity))
        elif price_elasticity > 0.1:
            recommendations.append(
                "üí∞ **–ü—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç**: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω—ã –∏ —Å–ø—Ä–æ—Å–∞ (+{:.2f}). "
                "–í–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —Ü–µ–Ω.".format(price_elasticity))
    except:
        pass
    
    # 7. –ê–Ω–∞–ª–∏–∑ —É–ø—É—â–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã
    zero_sales_days = df[df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] == 0]
    if not zero_sales_days.empty:
        avg_daily_sales = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].mean()
        lost_profit = len(zero_sales_days['–î–∞—Ç–∞'].unique()) * avg_daily_sales * df['–°—É–º–º–∞'].mean()
        recommendations.append(
            f"‚ö†Ô∏è **–£–ø—É—â–µ–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞**: {len(zero_sales_days['–î–∞—Ç–∞'].unique()} –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–¥–∞–∂. "
            f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: ~{lost_profit:,.0f} —Ä—É–±. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏ —Ä–∞–±–æ—Ç—É —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂."
        )
    
    return recommendations if recommendations else [
        "üîé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö."
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–∞
def create_pdf_report(df, forecast_df, recommendations, filtered_df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", ln=1, align='C')
    pdf.ln(10)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏", ln=1)
    pdf.set_font("Arial", size=12)
    
    total_sales = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
    total_revenue = df['–í—ã—Ä—É—á–∫–∞'].sum()
    avg_price = df['–°—É–º–º–∞'].mean()
    unique_products = df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].nunique()
    
    pdf.cell(200, 10, txt=f"–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {total_sales:,.0f}", ln=1)
    pdf.cell(200, 10, txt=f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.2f} —Ä—É–±.", ln=1)
    pdf.cell(200, 10, txt=f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_price:.2f} —Ä—É–±.", ln=1)
    pdf.cell(200, 10, txt=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {unique_products}", ln=1)
    pdf.ln(10)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", ln=1)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
    fig = px.line(
        filtered_df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'}).reset_index(),
        x='–î–∞—Ç–∞',
        y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂'
    )
    img_bytes = fig.to_image(format="png")
    pdf.image(BytesIO(img_bytes), x=10, w=190)
    pdf.ln(5)
    
    # –ü—Ä–æ–¥—É–∫—Ç—ã
    fig = px.bar(
        filtered_df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index(),
        x='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
        y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º'
    )
    img_bytes = fig.to_image(format="png")
    pdf.image(BytesIO(img_bytes), x=10, w=190)
    pdf.ln(5)
    
    # –õ–æ–∫–∞—Ü–∏–∏
    fig = px.bar(
        filtered_df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')['–í—ã—Ä—É—á–∫–∞'].sum().reset_index(),
        x='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        y='–í—ã—Ä—É—á–∫–∞',
        title='–í—ã—Ä—É—á–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º'
    )
    img_bytes = fig.to_image(format="png")
    pdf.image(BytesIO(img_bytes), x=10, w=190)
    pdf.ln(10)
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    if forecast_df is not None:
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(200, 10, txt="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂", ln=1)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–î–∞—Ç–∞'],
            y=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            name='–§–∞–∫—Ç',
            line=dict(color='blue')
        ))
        fig.add_trace(go.Scatter(
            x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
            y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
            name='–ü—Ä–æ–≥–Ω–æ–∑',
            line=dict(color='red', dash='dot')
        ))
        img_bytes = fig.to_image(format="png")
        pdf.image(BytesIO(img_bytes), x=10, w=190)
        pdf.ln(5)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, txt="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", ln=1)
    pdf.set_font("Arial", size=12)
    
    for rec in recommendations:
        pdf.multi_cell(0, 10, txt=rec)
    
    return pdf

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà Sales-smart")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.expander("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", expanded=True):
    st.markdown("""
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:**
    - –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
        - **–î–∞—Ç–∞** - –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)
        - **–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (—á–∏—Å–ª–æ)
        - **–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞** - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–µ–∫—Å—Ç)
        - **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ** - –º–µ—Å—Ç–æ –ø—Ä–æ–¥–∞–∂–∏ (—Ç–µ–∫—Å—Ç)
        - **–°—É–º–º–∞** - —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (—á–∏—Å–ª–æ)
        - **–¢–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—è** - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç)
    - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –ø–æ–ª–Ω—ã–º–∏
    """)
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–¥–∞–∂ (Excel)",
        type="xlsx",
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏"
    )

if uploaded_file:
    error_msg, df = load_and_analyze_data(uploaded_file)
    
    if error_msg:
        st.error(error_msg)
    else:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_sales = df['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum()
        total_revenue = df['–í—ã—Ä—É—á–∫–∞'].sum()
        avg_price = df['–°—É–º–º–∞'].mean()
        unique_products = df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].nunique()
        
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{total_sales:,.0f}")
        col2.metric("–í—ã—Ä—É—á–∫–∞", f"{total_revenue:,.2f} —Ä—É–±.")
        col3.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_price:.2f} —Ä—É–±.")
        col4.metric("–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", unique_products)
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
        min_date = df['–î–∞—Ç–∞'].min().date()
        max_date = df['–î–∞—Ç–∞'].max().date()
        
        date_range = st.sidebar.date_input(
            "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
        
        products = st.sidebar.multiselect(
            "–ü—Ä–æ–¥—É–∫—Ç—ã",
            options=df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].unique(),
            default=df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].unique()
        )
        
        locations = st.sidebar.multiselect(
            "–õ–æ–∫–∞—Ü–∏–∏",
            options=df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].unique(),
            default=df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].unique()
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if len(date_range) == 2:
            start_date, end_date = date_range
            filtered_df = df[
                (df['–î–∞—Ç–∞'].dt.date >= start_date) & 
                (df['–î–∞—Ç–∞'].dt.date <= end_date) &
                (df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].isin(products)) &
                (df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].isin(locations))
            ]
        else:
            filtered_df = df[
                (df['–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'].isin(products)) &
                (df['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].isin(locations))
            ]
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs(["–î–∏–Ω–∞–º–∏–∫–∞", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–õ–æ–∫–∞—Ü–∏–∏", "–ü—Ä–æ–≥–Ω–æ–∑"])
        
        with tab1:
            fig = px.line(
                filtered_df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'}).reset_index(),
                x='–î–∞—Ç–∞',
                y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
                labels={'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '–û–±—ä–µ–º', '–î–∞—Ç–∞': '–î–∞—Ç–∞'}
            )
            fig.update_xaxes(tickformat="%d %b", dtick="M1")
            fig.update_layout(hovermode="x unified")
            st.plotly_chart(fig, use_container_width=True)
            
            st.dataframe(
                filtered_df.groupby('–î–∞—Ç–∞').agg({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum', '–í—ã—Ä—É—á–∫–∞': 'sum'})
                .style.format({'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '{:,.0f}', '–í—ã—Ä—É—á–∫–∞': '‚ÇΩ{:,.2f}'}),
                use_container_width=True
            )
        
        with tab2:
            col1, col2 = st.columns(2)
            with col1:
                fig = px.bar(
                    filtered_df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞')['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index(),
                    x='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º',
                    color='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
                    text_auto=True
                )
                fig.update_layout(
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(color='black')
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.scatter(
                    filtered_df.groupby('–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞').agg({
                        '–°—É–º–º–∞': 'mean',
                        '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum'
                    }).reset_index(),
                    x='–°—É–º–º–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    size='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    color='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞',
                    title='–¶–µ–Ω–∞ vs –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    hover_name='–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞'
                )
                fig.update_layout(
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(color='black')
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with tab3:
            st.markdown("### –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º")
            
            col1, col2 = st.columns(2)
            with col1:
                fig = px.bar(
                    filtered_df.groupby('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ').agg({
                        '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': 'sum',
                        '–í—ã—Ä—É—á–∫–∞': 'sum'
                    }).reset_index(),
                    x='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    y='–í—ã—Ä—É—á–∫–∞',
                    title='–í—ã—Ä—É—á–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º',
                    color='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    text_auto='.2s'
                )
                fig.update_traces(textfont_size=12, textangle=0, textposition="outside")
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
                loc_df = filtered_df.groupby(['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞'])['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index()
                
                fig = px.area(
                    loc_df,
                    x='–î–∞—Ç–∞',
                    y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                    color='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º',
                    facet_col='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    facet_col_wrap=2,
                    height=600
                )
                
                fig.update_layout(
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(color='black'),
                    showlegend=False
                )
                
                fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))
                st.plotly_chart(fig, use_container_width=True)
            
            st.markdown("### –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º")
            fig = px.line(
                filtered_df.groupby(['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', pd.Grouper(key='–î–∞—Ç–∞', freq='W-MON')])['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'].sum().reset_index(),
                x='–î–∞—Ç–∞',
                y='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                color='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                title='–ù–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º',
                markers=True
            )
            fig.update_xaxes(tickformat="%d %b", dtick="M1")
            fig.update_layout(hovermode="x unified")
            st.plotly_chart(fig, use_container_width=True)
        
        with tab4:
            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 30 –¥–Ω–µ–π")
            forecast_df, forecast_error = make_forecast(filtered_df)
            
            if forecast_error:
                st.warning(forecast_error)
            else:
                col1, col2 = st.columns([2, 1])
                with col1:
                    fig = go.Figure()
                    
                    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–§–∞–∫—Ç']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
                        name='–§–∞–∫—Ç',
                        line=dict(color='blue')
                    ))
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
                        name='–ü—Ä–æ–≥–Ω–æ–∑',
                        line=dict(color='red', dash='dot')
                    ))
                    
                    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * 1.2,
                        fill=None,
                        mode='lines',
                        line=dict(width=0),
                        showlegend=False
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–î–∞—Ç–∞'],
                        y=forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑']['–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'] * 0.8,
                        fill='tonexty',
                        mode='lines',
                        line=dict(width=0),
                        fillcolor='rgba(214,39,40,0.1)',
                        name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (¬±20%)'
                    ))
                    
                    fig.update_layout(
                        title='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏',
                        xaxis_title='–î–∞—Ç–∞',
                        yaxis_title='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                        hovermode='x unified',
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(color='black'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=1.02,
                            xanchor="right",
                            x=1
                        )
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.markdown("**–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞**")
                    st.dataframe(
                        forecast_df[forecast_df['–¢–∏–ø'] == '–ü—Ä–æ–≥–Ω–æ–∑'][['–î–∞—Ç–∞', '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂']]
                        .rename(columns={'–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂': '–ü—Ä–æ–≥–Ω–æ–∑'})
                        .style.format({'–ü—Ä–æ–≥–Ω–æ–∑': '{:,.0f}'}),
                        height=400
                    )
            
            st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            recommendations = generate_recommendations(filtered_df)
            for rec in recommendations:
                st.success(rec)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.sidebar.markdown("---")
        st.sidebar.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        
        # CSV
        csv = filtered_df.to_csv(index=False).encode('utf-8')
        st.sidebar.download_button(
            label="–°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name="sales_data.csv",
            mime="text/csv"
        )
        
        # PDF
        if st.sidebar.button("–°–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
            with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."):
                pdf_path = create_pdf_report(
                    filtered_df,
                    kpi_text,
                    figures_for_pdf,
                    recommendations
                )
                
                with open(pdf_path, "rb") as f:
                    pdf_bytes = f.read()
                
                st.sidebar.download_button(
                    label="–°–∫–∞—á–∞—Ç—å PDF",
                    data=pdf_bytes,
                    file_name="sales_report.pdf",
                    mime="application/pdf"
                )
                
                os.unlink(pdf_path)
